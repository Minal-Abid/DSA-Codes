 1. Delete all even-valued nodes in BST
cpp
Copy
Edit
Node* deleteEven(Node* root) {
    if (!root) return nullptr;

    root->left = deleteEven(root->left);
    root->right = deleteEven(root->right);

    if (root->data % 2 == 0) {
        // delete this node
        if (!root->left) {
            Node* temp = root->right;
            delete root;
            return temp;
        } else if (!root->right) {
            Node* temp = root->left;
            delete root;
            return temp;
        } else {
            // both children exist, use inorder successor
            Node* succ = root->right;
            while (succ->left) succ = succ->left;
            root->data = succ->data;
            root->right = deleteEven(root->right); // delete succ later
        }
    }
    return root;
}
âœ… 2. Delete all leaf nodes in BST
cpp
Copy
Edit
Node* deleteLeaf(Node* root) {
    if (!root) return nullptr;
    if (!root->left && !root->right) {
        delete root;
        return nullptr;
    }
    root->left = deleteLeaf(root->left);
    root->right = deleteLeaf(root->right);
    return root;
}
âœ… 3. Delete all nodes in range [L, R]
cpp
Copy
Edit
Node* deleteInRange(Node* root, int L, int R) {
    if (!root) return nullptr;

    root->left = deleteInRange(root->left, L, R);
    root->right = deleteInRange(root->right, L, R);

    if (root->data >= L && root->data <= R) {
        if (!root->left) {
            Node* temp = root->right;
            delete root;
            return temp;
        } else if (!root->right) {
            Node* temp = root->left;
            delete root;
            return temp;
        } else {
            Node* succ = root->right;
            while (succ->left) succ = succ->left;
            root->data = succ->data;
            root->right = deleteInRange(root->right, succ->data, succ->data);
        }
    }
    return root;
}
âœ… 4. Check if a BST/AVL is balanced
cpp
Copy
Edit
int height(Node* root) {
    if (!root) return 0;
    return 1 + max(height(root->left), height(root->right));
}

bool isBalanced(Node* root) {
    if (!root) return true;

    int lh = height(root->left);
    int rh = height(root->right);

    if (abs(lh - rh) > 1) return false;

    return isBalanced(root->left) && isBalanced(root->right);
}
âœ… 5. Count number of rotations during AVL deletion
Just modify your leftRotate() and rightRotate() functions to include a counter.

âž• Add this globally:
cpp
Copy
Edit
int rotations = 0;
ðŸ”„ Modify rotations:
cpp
Copy
Edit
Node* leftRotate(Node* x) {
    rotations++;
    Node* y = x->right;
    Node* T2 = y->left;
    y->left = x;
    x->right = T2;
    x->height = 1 + max(getHeight(x->left), getHeight(x->right));
    y->height = 1 + max(getHeight(y->left), getHeight(y->right));
    return y;
}

Node* rightRotate(Node* y) {
    rotations++;
    Node* x = y->left;
    Node* T2 = x->right;
    x->right = y;
    y->left = T2;
    y->height = 1 + max(getHeight(y->left), getHeight(y->right));
    x->height = 1 + max(getHeight(x->left), getHeight(x->right));
    return x;
}
At the end of your main(), you can print:













Ask ChatGPT

